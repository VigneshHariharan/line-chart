{"version":3,"file":"Chart.stories-0c89764c.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../src/data.ts","../../src/chart/math.helpers.ts","../../src/lineChart.ts","../../src/components/LineChart.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","export const lineChartData = [\n  {\n    id: \"japan\",\n    color: \"hsl(248, 70%, 50%)\",\n    data: [\n      {\n        x: \"plane\",\n        y: 270,\n      },\n      {\n        x: \"helicopter\",\n        y: 49,\n      },\n      {\n        x: \"boat\",\n        y: 152,\n      },\n      {\n        x: \"train\",\n        y: 39,\n      },\n      {\n        x: \"subway\",\n        y: 103,\n      },\n      {\n        x: \"bus\",\n        y: 54,\n      },\n      {\n        x: \"car\",\n        y: 243,\n      },\n      {\n        x: \"moto\",\n        y: 7,\n      },\n      {\n        x: \"bicycle\",\n        y: 152,\n      },\n      {\n        x: \"horse\",\n        y: 85,\n      },\n      {\n        x: \"skateboard\",\n        y: 32,\n      },\n      {\n        x: \"others\",\n        y: 295,\n      },\n    ],\n  },\n    {\n      id: \"france\",\n      color: \"hsl(247, 70%, 50%)\",\n      data: [\n        {\n          x: \"plane\",\n          y: 189,\n        },\n        {\n          x: \"helicopter\",\n          y: 101,\n        },\n        {\n          x: \"boat\",\n          y: 45,\n        },\n        {\n          x: \"train\",\n          y: 276,\n        },\n        {\n          x: \"subway\",\n          y: 216,\n        },\n        {\n          x: \"bus\",\n          y: 95,\n        },\n        {\n          x: \"car\",\n          y: 67,\n        },\n        {\n          x: \"moto\",\n          y: 152,\n        },\n        {\n          x: \"bicycle\",\n          y: 191,\n        },\n        {\n          x: \"horse\",\n          y: 265,\n        },\n        {\n          x: \"skateboard\",\n          y: 42,\n        },\n        {\n          x: \"others\",\n          y: 167,\n        },\n      ],\n    },\n    {\n      id: \"us\",\n      color: \"hsl(138, 70%, 50%)\",\n      data: [\n        {\n          x: \"plane\",\n          y: 80,\n        },\n        {\n          x: \"helicopter\",\n          y: 299,\n        },\n        {\n          x: \"boat\",\n          y: 111,\n        },\n        {\n          x: \"train\",\n          y: 74,\n        },\n        {\n          x: \"subway\",\n          y: 188,\n        },\n        {\n          x: \"bus\",\n          y: 8,\n        },\n        {\n          x: \"car\",\n          y: 251,\n        },\n        {\n          x: \"moto\",\n          y: 61,\n        },\n        {\n          x: \"bicycle\",\n          y: 127,\n        },\n        {\n          x: \"horse\",\n          y: 49,\n        },\n        {\n          x: \"skateboard\",\n          y: 55,\n        },\n        {\n          x: \"others\",\n          y: 72,\n        },\n      ],\n    },\n    {\n      id: \"germany\",\n      color: \"hsl(126, 70%, 50%)\",\n      data: [\n        {\n          x: \"plane\",\n          y: 287,\n        },\n        {\n          x: \"helicopter\",\n          y: 245,\n        },\n        {\n          x: \"boat\",\n          y: 229,\n        },\n        {\n          x: \"train\",\n          y: 52,\n        },\n        {\n          x: \"subway\",\n          y: 205,\n        },\n        {\n          x: \"bus\",\n          y: 7,\n        },\n        {\n          x: \"car\",\n          y: 155,\n        },\n        {\n          x: \"moto\",\n          y: 11,\n        },\n        {\n          x: \"bicycle\",\n          y: 59,\n        },\n        {\n          x: \"horse\",\n          y: 133,\n        },\n        {\n          x: \"skateboard\",\n          y: 187,\n        },\n        {\n          x: \"others\",\n          y: 213,\n        },\n      ],\n    },\n    {\n      id: \"norway\",\n      color: \"hsl(185, 70%, 50%)\",\n      data: [\n        {\n          x: \"plane\",\n          y: 223,\n        },\n        {\n          x: \"helicopter\",\n          y: 6,\n        },\n        {\n          x: \"boat\",\n          y: 280,\n        },\n        {\n          x: \"train\",\n          y: 216,\n        },\n        {\n          x: \"subway\",\n          y: 196,\n        },\n        {\n          x: \"bus\",\n          y: 229,\n        },\n        {\n          x: \"car\",\n          y: 25,\n        },\n        {\n          x: \"moto\",\n          y: 117,\n        },\n        {\n          x: \"bicycle\",\n          y: 270,\n        },\n        {\n          x: \"horse\",\n          y: 115,\n        },\n        {\n          x: \"skateboard\",\n          y: 120,\n        },\n        {\n          x: \"others\",\n          y: 5,\n        },\n      ],\n    },\n];\n\nexport const lineChartMetaData = {\n  labels: {\n    x: \"vehicles\",\n    y: \"height\"\n  },\n};","import { TLineData, chartData, coordinates, TFindPointInPixelArgs, IChartOptions , IMinMaxRes, IPointsStructure} from './types';\n\n// Given a set of x,y coordinates tell which points it refers in canvas\nexport class MathHelper {\n  xCoordinates: coordinates = [];\n  yCoordinates: coordinates = [];\n  xUnits: number = 1;\n  yUnits: number = 1;\n  lengthOfXUnits: number = 1;\n  lengthOfYUnits: number = 1;\n\n  constructor() {\n    this.xCoordinates = [];\n    this.yCoordinates = [];\n  }\n\n  #sortCoordinates(points: string[] | number[]) {\n    if (typeof points[0] === \"number\") {\n      return points.sort((a, b) => a - b);\n    } else {\n      return points;\n    }\n  }\n\n  #toFixedNum(num: number) {\n    return Number(num.toFixed(2));\n  }\n\n  #findPointInPixel = ({\n    area,\n    index,\n    minMax,\n    point,\n    space,\n    unit,\n  }: TFindPointInPixelArgs) => {\n    if (typeof point === \"string\") {\n      const stringNo = index;\n      return this.#toFixedNum(stringNo * unit + space);\n    }\n\n    const calibratedXForGraph = point - minMax.min;\n    const reqPercentage = Math.round((calibratedXForGraph / minMax.max) * 100);\n    const pixelForPoint = (area / 100) * reqPercentage;\n\n    return this.#toFixedNum(pixelForPoint) + space;\n  };\n\n  findMinMax(chartData: chartData): IMinMaxRes {\n    const xCoordinates = this.xCoordinates;\n    const yCoordinates = this.yCoordinates;\n\n    for (let lineData of chartData) {\n      for (let line of lineData.data) {\n        if(!xCoordinates.includes(line.x)) {\n           xCoordinates.push(line.x);   \n        }\n\n        if(!yCoordinates.includes(line.y)) {\n          yCoordinates.push(line.y);\n        }\n      }\n    }\n    this.#sortCoordinates(xCoordinates);\n    this.#sortCoordinates(yCoordinates);\n\n\n    return {\n      x: { min: xCoordinates[0], max: xCoordinates[xCoordinates.length - 1] },\n      y: { min: yCoordinates[0], max: yCoordinates[yCoordinates.length - 1] },\n    };\n  }\n\n  #findUnit(linePoints: number[] | string[], space: number) {\n    if (typeof linePoints[0] === \"string\") {\n      return space / linePoints.length;\n    } else {\n      this.#sortCoordinates(linePoints);\n      // const totalRepresentationInGivenUnit = (linePoints[linePoints.length - 1] - linePoints[0]);\n      // return Number((space / unit).toFixed(2))\n      const equivalentRepresantationOfUnit = space / linePoints.length;\n      return Number(equivalentRepresantationOfUnit.toFixed(2));\n    }\n  }\n\n  findUnits(\n    xPoints: number[] | string[],\n    yPoints: number[] | string[],\n    width: number,\n    height: number\n  ) {\n    const xUnit = this.#findUnit(xPoints, width);\n    const yUnit = this.#findUnit(yPoints, height);\n\n    this.xUnits = xUnit;\n    this.yUnits = yUnit;\n    this.lengthOfXUnits = xPoints.length;\n    this.lengthOfYUnits = yPoints.length;\n    return { xUnit, yUnit };\n  }\n\n  #prepareCoordinatesForLine(lineData: TLineData) {\n    let points = [];\n    let xPoints = [];\n    let yPoints = [];\n\n    for (let line of lineData) {\n      points.push([line.x, line.y]);\n      xPoints.push(line.x);\n      yPoints.push(line.y);\n    }\n\n    return { points, xPoints, yPoints };\n  }\n\n  convertPointsToPx(\n    lineData: TLineData,\n    { xDrawingArea, yDrawingArea, height, space }: IChartOptions,\n    minMax: IMinMaxRes\n  ): IPointsStructure[] {\n    const { points, xPoints, yPoints } =\n      this.#prepareCoordinatesForLine(lineData);\n\n    const units = this.findUnits(xPoints, yPoints, xDrawingArea, yDrawingArea);\n\n    const pointsInPx = points.map((point, index) => {\n      const xCoordinate = this.#findPointInPixel({\n        area: xDrawingArea,\n        index,\n        minMax: minMax.x,\n        unit: units.xUnit,\n        space,\n        point: point[0],\n      });\n      // y coordinate in canvas comes from top to bottom, in graph it is inverse\n      const yCoordinate =\n        height -\n        this.#findPointInPixel({\n          area: yDrawingArea,\n          point: point[1],\n          minMax: minMax.y,\n          index,\n          unit: units.yUnit,\n          space,\n        });\n\n      return { xCoordinate, yCoordinate };\n    });\n\n    return pointsInPx;\n  }\n}\n","import \"./style.css\";\nimport { lineChartData, lineChartMetaData } from \"./data\";\nimport { chartData, metaData, IChartOptions, IPointsStructure, IMinMaxRes } from \"./chart/types\";\nimport { MathHelper } from \"./chart/math.helpers\";\n\nconst DEFAULT_SPACE = 50;\n\nexport class DrawLineChart extends MathHelper {\n  chartData: chartData = lineChartData;\n  metaData: metaData = lineChartMetaData;\n  context: CanvasRenderingContext2D;\n  chartOptions: IChartOptions = {\n    height: 0,\n    space: DEFAULT_SPACE,\n    width: 0,\n    xDrawingArea: 0,\n    yDrawingArea: 0,\n  };\n\n  constructor(\n    context: CanvasRenderingContext2D,\n    chartData: typeof lineChartData,\n    metaData: typeof lineChartMetaData,\n    options: Partial<IChartOptions>\n  ) {\n    super();\n    this.chartData = chartData;\n    this.metaData = metaData;\n    this.context = context;\n    this.chartOptions = {\n      height: 0,\n      space: DEFAULT_SPACE,\n      width: 0,\n      xDrawingArea: 0,\n      yDrawingArea: 0,\n      ...options,\n    };\n  }\n\n  setChartSizes(options: IChartOptions) {\n    this.chartOptions = {\n      ...this.chartOptions,\n      ...options,\n    };\n  }\n\n  #fillTextForAxis(minMax: IMinMaxRes) {\n    let xAxisLen = this.chartOptions.space;\n    let xIndex = 0;\n\n    this.context.textAlign = \"center\";\n    this.context.strokeStyle = \"black\";\n\n    let xUnitInGivenValue = 1;\n    if (typeof minMax.x.max === \"number\") {\n      let perUnit = minMax.x.max / this.lengthOfXUnits;\n      xUnitInGivenValue = perUnit;\n    }\n\n    while (xIndex < this.lengthOfXUnits) {\n      this.context.beginPath();\n      this.context.moveTo(\n        xAxisLen,\n        this.chartOptions.height - this.chartOptions.space\n      );\n      this.context.lineTo(\n        xAxisLen,\n        this.chartOptions.height - this.chartOptions.space + 15\n      );\n\n      const text =\n        typeof this.xCoordinates[xIndex] === \"string\"\n          ? this.xCoordinates[xIndex]\n          : String(((xIndex + 1) * xUnitInGivenValue).toFixed(0));\n      this.context.fillText(\n        text,\n        xAxisLen,\n        this.chartOptions.height - this.chartOptions.space + 30\n      );\n      this.context.stroke();\n      this.context.closePath();\n      xAxisLen += this.xUnits;\n      xIndex += 1;\n    }\n\n    let yAxisLen = this.chartOptions.height - this.chartOptions.space;\n    let yIndex = this.lengthOfYUnits - 1;\n\n    let yUnitInGivenValue = 1;\n    if(typeof minMax.y.max === 'number') {\n      let perUnit = (minMax.y.max)/this.lengthOfYUnits \n      yUnitInGivenValue = perUnit;\n    }\n    while (yIndex > -2) {\n      this.context.beginPath();\n      this.context.moveTo(\n        this.chartOptions.space,\n        this.chartOptions.height - yAxisLen\n      );\n      this.context.lineTo(\n        this.chartOptions.space - 15,\n        this.chartOptions.height - yAxisLen\n      );\n      const text =\n        typeof this.yCoordinates[yIndex] === \"string\"\n          ? this.yCoordinates[yIndex]\n          : String(((yIndex + 1) * yUnitInGivenValue).toFixed(0));\n\n      this.context.fillText(\n        text,\n        this.chartOptions.space - 30,\n        this.chartOptions.height - yAxisLen\n      );\n      this.context.stroke();\n      this.context.closePath();\n\n      yAxisLen -= this.yUnits;\n      yIndex -= 1;\n    }\n  }\n\n  #drawChartRegion({ height, space, width }: Required<IChartOptions>) {\n    this.context.beginPath();\n    this.context.moveTo(space, space);\n    this.context.lineTo(space, height - space);\n    this.context.lineTo(width - space, height - space);\n    this.context.strokeStyle = \"black\";\n    this.context.stroke();\n    this.context.closePath();\n\n    const minMax = this.findMinMax(this.chartData);\n    for (let lineData of this.chartData) {\n      const points = this.convertPointsToPx(\n        lineData.data,\n        this.chartOptions,\n        minMax\n      );\n\n      points.forEach(({ xCoordinate, yCoordinate }, index) => {\n        this.context.beginPath();\n        this.context.arc(xCoordinate, yCoordinate, 3, Math.PI, 3 * Math.PI);\n\n        // const { x, y } = lineData.data[index]\n        // this.context.fillText(`${x}-${y}`, xCoordinate + 12, yCoordinate + 5);\n        this.context.stroke();\n        this.context.closePath();\n      });\n      this.#drawLine(points, lineData.color);\n    }\n    this.#fillTextForAxis(minMax);\n  }\n\n  #drawLine(points: IPointsStructure[], color: string = 'black') {\n    this.context.beginPath();\n    let shouldMove = false;\n    for (let { xCoordinate, yCoordinate } of points) {\n      if (!shouldMove) {\n        this.context.moveTo(xCoordinate, yCoordinate);\n        shouldMove = true;\n      } else {\n        this.context.lineTo(xCoordinate, yCoordinate);\n      }\n    }\n\n    this.context.strokeStyle = color;\n    this.context.lineWidth = 2;\n    this.context.stroke();\n    this.context.closePath();\n  }\n\n  initChart() {\n    if (!this.context) {\n      throw new Error(\"Canvas context is not provided\");\n    }\n    const space = this?.chartOptions?.space || DEFAULT_SPACE;\n\n    const options = {\n      space: DEFAULT_SPACE,\n      width: this.context.canvas.width,\n      height: this.context.canvas.height,\n      yDrawingArea: this.context.canvas.height - 2 * space,\n      xDrawingArea: this.context.canvas.width - 2 * space,\n    };\n    this.setChartSizes(options);\n    this.#drawChartRegion(this.chartOptions);\n  }\n}\n// // create canvas and attach element\n// const canvas = document.createElement(\"canvas\");\n\n// const lineChart = document.querySelector(\"#line-chart\");\n// canvas.id = \"line-chart-graph\";\n\n// canvas.setAttribute(\"width\", \"666px\");\n// canvas.setAttribute(\"height\", \"500px\");\n// const context = canvas.getContext(\"2d\");\n\n// if (context) {\n//   const chart1 = new DrawLineChart(context, lineChartData, lineChartMetaData, {});\n//   chart1.initChart();\n// }\n\n// if (lineChart) {\n//   lineChart.appendChild(canvas);\n// }\n","import React, { useEffect, useRef } from 'react';\nimport { DrawLineChart } from '../lineChart'\nimport { lineChartData, lineChartMetaData } from '../data';\n\ninterface ILineChart {\n  /** unique id for the element */\n  id: string;\n  /** width of canvas in pixels */\n  width?: number;\n  /** height of canvas in pixels */\n  height?: number;\n}\n\nconst LineChart = ({ id, height, width }: ILineChart) => {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        if(!canvasRef.current) return;\n\n        const canvasElement: HTMLCanvasElement = canvasRef.current;\n\n        const context = canvasElement.getContext('2d')\n\n        if(context) {\n           const lineChart = new DrawLineChart(context, lineChartData, lineChartMetaData, {});\n           lineChart.initChart()\n        }\n    }, [canvasRef, width, height]);\n\n    return (<canvas id={id} ref={canvasRef} width={Number(width) || '300px'} height={Number(height) ||'300px'}></canvas>)\n}\n\nexport { LineChart }"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","lineChartData","lineChartMetaData","MathHelper","__privateAdd","_sortCoordinates","_toFixedNum","_findUnit","_prepareCoordinatesForLine","__publicField","_findPointInPixel","area","index","minMax","point","space","unit","stringNo","__privateMethod","toFixedNum_fn","calibratedXForGraph","reqPercentage","pixelForPoint","chartData","xCoordinates","yCoordinates","lineData","line","sortCoordinates_fn","xPoints","yPoints","width","height","xUnit","findUnit_fn","yUnit","xDrawingArea","yDrawingArea","points","prepareCoordinatesForLine_fn","units","xCoordinate","__privateGet","yCoordinate","num","linePoints","equivalentRepresantationOfUnit","DEFAULT_SPACE","DrawLineChart","context","metaData","options","_fillTextForAxis","_drawChartRegion","_drawLine","_a","drawChartRegion_fn","fillTextForAxis_fn","xAxisLen","xIndex","xUnitInGivenValue","text","yAxisLen","yIndex","yUnitInGivenValue","drawLine_fn","color","shouldMove","LineChart","id","canvasRef","useRef","useEffect","jsx"],"mappings":";;;;;;;;GASa,IAAIA,EAAEC,EAAiBC,EAAE,OAAO,IAAI,eAAe,EAAEC,EAAE,OAAO,IAAI,gBAAgB,EAAEC,EAAE,OAAO,UAAU,eAAeC,EAAEL,EAAE,mDAAmD,kBAAkBM,GAAE,CAAC,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,SAAS,EAAE,EAClP,SAASC,EAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAEC,EAAE,GAAGC,EAAE,KAAKC,EAAE,KAAcJ,IAAT,SAAaG,EAAE,GAAGH,GAAYD,EAAE,MAAX,SAAiBI,EAAE,GAAGJ,EAAE,KAAcA,EAAE,MAAX,SAAiBK,EAAEL,EAAE,KAAK,IAAIE,KAAKF,EAAEL,EAAE,KAAKK,EAAEE,CAAC,GAAG,CAACL,GAAE,eAAeK,CAAC,IAAIC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,GAAGH,GAAGA,EAAE,aAAa,IAAIG,KAAKF,EAAED,EAAE,aAAaC,EAAWG,EAAED,CAAC,IAAZ,SAAgBC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,MAAM,CAAC,SAAST,EAAE,KAAKM,EAAE,IAAIK,EAAE,IAAIC,EAAE,MAAMF,EAAE,OAAOP,EAAE,OAAO,CAAC,YAAkBF,EAAaY,EAAA,IAACR,EAAEQ,EAAA,KAAaR,ECPxWS,EAAA,QAAiBf,mCCHZ,MAAMgB,EAAgB,CAC3B,CACE,GAAI,QACJ,MAAO,qBACP,KAAM,CACJ,CACE,EAAG,QACH,EAAG,GACL,EACA,CACE,EAAG,aACH,EAAG,EACL,EACA,CACE,EAAG,OACH,EAAG,GACL,EACA,CACE,EAAG,QACH,EAAG,EACL,EACA,CACE,EAAG,SACH,EAAG,GACL,EACA,CACE,EAAG,MACH,EAAG,EACL,EACA,CACE,EAAG,MACH,EAAG,GACL,EACA,CACE,EAAG,OACH,EAAG,CACL,EACA,CACE,EAAG,UACH,EAAG,GACL,EACA,CACE,EAAG,QACH,EAAG,EACL,EACA,CACE,EAAG,aACH,EAAG,EACL,EACA,CACE,EAAG,SACH,EAAG,GACL,CACF,CACF,EACE,CACE,GAAI,SACJ,MAAO,qBACP,KAAM,CACJ,CACE,EAAG,QACH,EAAG,GACL,EACA,CACE,EAAG,aACH,EAAG,GACL,EACA,CACE,EAAG,OACH,EAAG,EACL,EACA,CACE,EAAG,QACH,EAAG,GACL,EACA,CACE,EAAG,SACH,EAAG,GACL,EACA,CACE,EAAG,MACH,EAAG,EACL,EACA,CACE,EAAG,MACH,EAAG,EACL,EACA,CACE,EAAG,OACH,EAAG,GACL,EACA,CACE,EAAG,UACH,EAAG,GACL,EACA,CACE,EAAG,QACH,EAAG,GACL,EACA,CACE,EAAG,aACH,EAAG,EACL,EACA,CACE,EAAG,SACH,EAAG,GACL,CACF,CACF,EACA,CACE,GAAI,KACJ,MAAO,qBACP,KAAM,CACJ,CACE,EAAG,QACH,EAAG,EACL,EACA,CACE,EAAG,aACH,EAAG,GACL,EACA,CACE,EAAG,OACH,EAAG,GACL,EACA,CACE,EAAG,QACH,EAAG,EACL,EACA,CACE,EAAG,SACH,EAAG,GACL,EACA,CACE,EAAG,MACH,EAAG,CACL,EACA,CACE,EAAG,MACH,EAAG,GACL,EACA,CACE,EAAG,OACH,EAAG,EACL,EACA,CACE,EAAG,UACH,EAAG,GACL,EACA,CACE,EAAG,QACH,EAAG,EACL,EACA,CACE,EAAG,aACH,EAAG,EACL,EACA,CACE,EAAG,SACH,EAAG,EACL,CACF,CACF,EACA,CACE,GAAI,UACJ,MAAO,qBACP,KAAM,CACJ,CACE,EAAG,QACH,EAAG,GACL,EACA,CACE,EAAG,aACH,EAAG,GACL,EACA,CACE,EAAG,OACH,EAAG,GACL,EACA,CACE,EAAG,QACH,EAAG,EACL,EACA,CACE,EAAG,SACH,EAAG,GACL,EACA,CACE,EAAG,MACH,EAAG,CACL,EACA,CACE,EAAG,MACH,EAAG,GACL,EACA,CACE,EAAG,OACH,EAAG,EACL,EACA,CACE,EAAG,UACH,EAAG,EACL,EACA,CACE,EAAG,QACH,EAAG,GACL,EACA,CACE,EAAG,aACH,EAAG,GACL,EACA,CACE,EAAG,SACH,EAAG,GACL,CACF,CACF,EACA,CACE,GAAI,SACJ,MAA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","x_google_ignoreList":[0,1]}